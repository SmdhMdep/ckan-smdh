name: Deploy CKAN image

on:
   workflow_dispatch:
   workflow_run:
   # only runs additional steps if [ Create Ckan Base image ] was successful
    workflows: [ Create Ckan Base image ]
    types: [ completed ]
   push:
      branches: [ "deployment-workflow" ]


jobs:
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Validate prerequisites
        uses: ahmadnassri/action-workflow-run-wait@2aa3d9e1a12ecaaa9908e368eaf2123bb084323e
        with:
          timeout: 15000 # we stop trying to check altogether after 15 secs because there is no delay set up; this prevents hanging if the workflow is cancelled
          # delay: 60000 # we try to check the status of the prerequisite workflows after 1 min
      
      - name: Install Docker Compose CLI
        uses: withlogicco/setup-compose-cli@631064dfb7d769983c89a86bd42e6bc7936101dc
      
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::261730452028:role/OIDC_Github
          aws-region: eu-west-2
          role-session-name: CKANDockerDeployment
          
      - run: |
         docker context create ecs --help
         docker context create ecs ckan-ecs --from-env
         docker context use ckan-ecs
         
      - name: Update docker-compose
        run: |
         yq e '.services.nginx += {"x-aws-pull_credentials": "${{ secrets.AWS_CR_ARN }}"}' -i contrib/docker-ckan/docker-compose.yml
         yq e '.services.ckan += {"x-aws-pull_credentials": "${{ secrets.AWS_CR_ARN }}"}' -i contrib/docker-ckan/docker-compose.yml
         yq e '.services.db += {"x-aws-pull_credentials": "${{ secrets.AWS_CR_ARN }}"}' -i contrib/docker-ckan/docker-compose.yml
         
      - name: Update env file
        run: |
         # mv contrib/docker-ckan/prod.env.template contrib/docker-ckan/prod.env
         sed -e 's/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${{ secrets.DB_P }}/g
         s/^POSTGRES_PASSWORD=.*/POSTGRES_PASSWORD=${{ secrets.DB_P }}/g
         s/^DATASTORE_READONLY_PASSWORD=.*/DATASTORE_READONLY_PASSWORD=${{ secrets.DS_P }}/g
         s/^CKAN_SMTP_SERVER=.*/CKAN___SMTP__SERVER=${{ secrets.SMTP_SRV }}/g
         s/^CKAN_SMTP_USER=.*/CKAN___SMTP__USER=${{ secrets.SMTP_U }}/g
         s/^CKAN_SMTP_PASSWORD=.*/CKAN___SMTP__PASSWORD=${{ secrets.SMTP_P }}/g
         s/^CKANEXT__SAML2AUTH__IDP_METADATA__REMOTE_URL=.*/CKANEXT__SAML2AUTH__IDP_METADATA__REMOTE_URL=`${{ secrets.SAML_REMOTE_URL }}`/g
         s/^CKANEXT__SAML2AUTH__IDENTITY_ID=.*/CKANEXT__SAML2AUTH__IDENTITY_ID=${{ secrets.SAML_IDENTITY_ID }}/g
         s/^CKANEXT__S3FILESTORE__AWS_BUCKET_NAME=.*/CKANEXT__S3FILESTORE__AWS_BUCKET_NAME=${{ secrets.S3_NAME }}/g
         s/^CKANEXT__S3FILESTORE__REGION_NAME=.*/CKANEXT__S3FILESTORE__REGION_NAME=${{ secrets.S3_REG }}/g
         s/^CKANEXT__S3FILESTORE__AWS_ACCESS_KEY_ID=.*/CKANEXT__S3FILESTORE__AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}/g
         s/^CKANEXT__S3FILESTORE__AWS_SECRET_ACCESS_KEY=.*/CKANEXT__S3FILESTORE__AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}/g' \
         "contrib/docker-ckan/prod.env.template" > "contrib/docker-ckan/prod.env"
      
      - name: Gen Cloud Formation Template
        run: |
         docker compose convert
      
